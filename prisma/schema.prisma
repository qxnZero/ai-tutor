

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  password          String?
  image             String?


  provider          String?
  providerAccountId String?
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?


  subscriptionStatus      String    @default("free") // free, premium, cancelled
  subscriptionExpiresAt   DateTime?
  razorpayCustomerId      String?
  razorpaySubscriptionId  String?
  freeCoursesUsed         Int       @default(0)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  sessions      Session[]
  courses       Course[]
  progress      UserProgress[]
  notes         Note[]
  bookmarks     Bookmark[]
  transactions  SubscriptionTransaction[]


  @@index([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  difficulty  String
  topic       String
  modules     Module[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  isPublic    Boolean  @default(false)
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  lessons     Lesson[]
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String?    @db.Text
  exercises   Json?
  order       Int
  completed   Boolean    @default(false)
  module      Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String
  notes       Note[]
  bookmarks   Bookmark[]
}

model UserProgress {
  id         String   @id @default(cuid())
  courseId   String
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  progress   Float    @default(0)
  lastLesson String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Note {
  id        String   @id @default(cuid())
  content   String   @db.Text
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id        String   @id @default(cuid())
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Subscription {
  id              String    @id @default(cuid())
  name            String
  description     String?
  price           Int
  currency        String    @default("INR")
  interval        String    // monthly, yearly
  razorpayPlanId  String?
  features        Json?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  transactions    SubscriptionTransaction[]
}

model SubscriptionTransaction {
  id                 String       @id @default(cuid())
  userId             String
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId     String
  subscription       Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  amount             Int
  currency           String       @default("INR")
  status             String       // created, authorized, captured, failed
  razorpayPaymentId  String?
  razorpayOrderId    String?
  razorpaySignature  String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

